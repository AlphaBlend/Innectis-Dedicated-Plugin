package net.innectis.innplugin.objects;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.UUID;
import net.innectis.innplugin.handlers.datasource.DBManager;
import net.innectis.innplugin.InnPlugin;
import net.innectis.innplugin.items.IdpItemStack;
import net.innectis.innplugin.items.StackBag;
import net.innectis.innplugin.player.PlayerCredentials;
import net.innectis.innplugin.player.PlayerCredentialsManager;

/**
 *
 * @author Hret
 *
 * Handler for the contents of ender chests
 */
public class EnderChestContents {

    private int chestid;
    private long bagid;
    private int typeid;
    private PlayerCredentials playerCredentials;
    /** The items */
    private IdpItemStack[] items;

    private EnderChestContents() {
    }

    private EnderChestContents(int chestid, long bagid, int typeid, PlayerCredentials playerCredentials, IdpItemStack[] items) {
        this.chestid = chestid;
        this.bagid = bagid;
        this.typeid = typeid;
        this.playerCredentials = playerCredentials;
        this.items = items;
    }

    private EnderChestContents(int chestid, int typeid, PlayerCredentials playerCredentials, IdpItemStack[] items) {
        this.chestid = chestid;
        this.bagid = 0;
        this.typeid = typeid;
        this.playerCredentials = playerCredentials;
        this.items = items;
    }

    /**
     * Returns the chest id
     * @return
     */
    public int getChestId() {
        return chestid;
    }

    /**
     * Gets the credentials of the player these contents belong to
     * @return
     */
    public PlayerCredentials getPlayerCredentials() {
        return playerCredentials;
    }

    /**
     * Returns the name of the player where this content belongs to
     * @return
     */
    public String getPlayername() {
        return playerCredentials.getName();
    }

    /**
     * The typeid
     * @return
     */
    public int getTypeId() {
        return typeid;
    }

    /**
     * Get the items
     * @return
     */
    public IdpItemStack[] getItems() {
        return items;
    }

    /**
     * Set the items
     */
    public void setItems(IdpItemStack[] items) {
        this.items = items;
    }

    /**
     * Saves or updates the enderchest contents.
     *
     * When its inserted (chestid = 0) the chestid will be filled with the generated value.
     * @return true if succeed.
     */
    public boolean save() {
        PreparedStatement statement = null;
        ResultSet set = null;

        try {
            // If id == 0 then its new -> INSERT
            if (chestid == 0) {
                StackBag bag = new StackBag(items);
                bag.save();

                statement = DBManager.prepareStatementWithAutoGeneratedKeys(" INSERT INTO enderchests (player_id, typeid, bagid) VALUES (?,?,?) ");
                statement.setString(1, playerCredentials.getUniqueId().toString());
                statement.setInt(2, typeid);
                statement.setLong(3, bag.getBagid());
                statement.executeUpdate();

                // Update the chestid
                set = statement.getGeneratedKeys();

                if (set.next()) {
                    chestid = set.getInt(1);
                    return true;
                }
            } // Its not new -> Update!
            else {
                StackBag bag = new StackBag(bagid, items);
                bag.save();

                statement = DBManager.prepareStatement(" UPDATE enderchests set bagid = ? where chestid = ? ");
                statement.setLong(1, bag.getBagid());
                statement.setInt(2, chestid);

                // Check if the something was updated
                return statement.executeUpdate() == 1;
            }
        } catch (SQLException ex) {
            InnPlugin.logError("Error saving nethercontents!", ex);
        } finally {
            DBManager.closeResultSet(set);
            DBManager.closePreparedStatement(statement);
        }

        return false;
    }

    /**
     * Gives the EnderChestContents of the enderchest for the player.
     * It will use the player's location to get the correct chest.
     * @param playerCredentials
     * @return
     */
    public static EnderChestContents getContents(PlayerCredentials playerCredentials, EnderContentsType type) {
        // Return null if type == NONE
        if (type == EnderContentsType.NONE) {
            return null;
        }

        PreparedStatement statement = null;
        ResultSet set = null;

        try {
            statement = DBManager.prepareStatement(" SELECT chestid, bagid FROM enderchests where player_id = ? and typeid = ? ");

            statement.setString(1, playerCredentials.getUniqueId().toString());
            statement.setInt(2, type.getTypeid());
            set = statement.executeQuery();

            int id = 0;
            long bagid = 0;
            if (set.next()) {
                id = set.getInt("chestid");
                bagid = set.getLong("bagid");
            }
            if (bagid > 0) {
                StackBag bag = StackBag.getContentbag(bagid);
                return new EnderChestContents(id, bagid, type.getTypeid(), playerCredentials, bag.getContents());
            } else {
                return new EnderChestContents(id, type.getTypeid(), playerCredentials, new IdpItemStack[27]);
            }
        } catch (SQLException ex) {
            InnPlugin.logError("Error loading endercontents!", ex);
        } finally {
            DBManager.closeResultSet(set);
            DBManager.closePreparedStatement(statement);
        }

        return null;
    }

    /**
     * Gets all ender chest contents from database
     * @return
     */
    public static List<EnderChestContents> getAllChestContents() {
        List<EnderChestContents> enderChests = new ArrayList<EnderChestContents>();

        PreparedStatement statement = null;
        ResultSet set = null;

        try {
            statement = DBManager.prepareStatement("SELECT chestid, player_id, typeid, bagid FROM enderchests");
            set = statement.executeQuery();

            while (set.next()) {
                int id = set.getInt("chestid");

                String playerIdString = set.getString("player_id");
                UUID playerId = UUID.fromString(playerIdString);
                PlayerCredentials credentials = PlayerCredentialsManager.getByUniqueId(playerId);

                int typeid = set.getInt("typeid");
                long bagid = set.getLong("bagid");

                if (bagid > 0) {
                    StackBag bag = StackBag.getContentbag(bagid);
                    enderChests.add(new EnderChestContents(id, bagid, typeid, credentials, bag.getContents()));
                }
            }
        } catch (SQLException ex) {
            InnPlugin.logError("Unable to get all ender chests!", ex);
        } finally {
            DBManager.closeResultSet(set);
            DBManager.closePreparedStatement(statement);
        }

        return enderChests;
    }

    /**
     * Gets a list of all ender chest content types
     * @return
     */
    public static List<EnderContentsType> getAllEnderContentTypes() {
        List<EnderContentsType> types = new ArrayList<EnderContentsType>();

        for (EnderContentsType etc : EnderContentsType.values()) {
            if (etc != EnderContentsType.NONE) {
                types.add(etc);
            }
        }

        return types;
    }

    /**
     * The different content types
     */
    public enum EnderContentsType {

        /** The type for the normal world */
        NORMAL(1),
        /** The type for the worlds where the enderchest is not allowed */
        NONE(0);
        /** The typeid */
        private final int typeid;
        private static final HashMap<Integer, EnderContentsType> types = new HashMap<Integer, EnderContentsType>();

        private EnderContentsType(int id) {
            this.typeid = id;
        }

        static {
            for (EnderContentsType ect : EnderContentsType.values()) {
                types.put(ect.getTypeid(), ect);
            }
        }

        /**
         * The typeid of this type
         * @return
         */
        public int getTypeid() {
            return typeid;
        }

        /**
         * Gets an ender contents type by id
         * @param id
         * @return
         */
        public static EnderContentsType getTypeById(int id) {
            return types.get(id);
        }
    }

}
