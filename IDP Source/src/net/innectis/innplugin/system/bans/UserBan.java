package net.innectis.innplugin.system.bans;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import net.innectis.innplugin.system.bans.BanHandler.BanType;
import net.innectis.innplugin.handlers.datasource.DBManager;
import net.innectis.innplugin.InnPlugin;
import net.innectis.innplugin.player.chat.ChatColor;
import net.innectis.innplugin.player.PlayerCredentials;
import net.innectis.innplugin.util.PlayerUtil;

/**
 * An object of a single username ban
 *
 * @author AlphaBlend
 */
public class UserBan extends Ban {

    private PlayerCredentials bannedPlayerCredentials = null;

    /**
     * Constructor for setting up a fresh ban
     * @param bannedPlayerCredentials
     * @param bannedByPlayerCredentials
     * @param bannedTime
     * @param durationTicks
     * @param joinBan
     */
    public UserBan(PlayerCredentials bannedPlayerCredentials, PlayerCredentials bannedByPlayerCredentials, Timestamp bannedTime, long durationTicks, boolean joinBan) {
        this(0, bannedPlayerCredentials, bannedByPlayerCredentials, bannedTime, durationTicks, joinBan);
    }

    /**
     * Constructor for an already existing ban
     * @paran id
     * @param bannedPlayer
     * @param bannedByPlayer
     * @param bannedTime
     * @param durationTicks
     * @param joinBan
     */
    public UserBan(int id, PlayerCredentials bannedPlayer, PlayerCredentials bannedByPlayer, Timestamp bannedTime, long durationTicks, boolean joinBan) {
        super(id, bannedByPlayer, bannedTime, durationTicks, joinBan);
        this.bannedPlayerCredentials = bannedPlayer;
    }

    /**
     * Gets the username associated with this ban
     * @return
     */
    public PlayerCredentials getBannedPlayerCredentials() {
        return bannedPlayerCredentials;
    }

    @Override
    public String[] getBanDetails() {
        String coloredName = PlayerUtil.getColoredName(getBannedPlayerCredentials());
        return new String[] {coloredName + ChatColor.WHITE + ": " + super.getBasicDetails()};
    }

    @Override
    public BanState getBanState() {
        if (super.isExpired()) {
            return BanState.EXPIRED;
        } else {
            if (super.isIndefiniteBan()) {
                return BanState.USERBAN_INDEFINITE;
            } else {
                return BanState.USERBAN_TIMED;
            }
        }
    }

    @Override
    public BanType getType() {
        if (super.isJoinBan()) {
            return BanType.BANNED_JOINBAN;
        } else if (super.isExpired()) {
            return BanType.EXPIRED;
        } else {
            return BanType.BANNED;
        }
    }

    /**
     * Saves this username ban to the database
     */
    @Override
    public void save() {
        PreparedStatement statement = null;
        ResultSet set = null;

        try {
            if (getId() > 0) {
                statement = DBManager.prepareStatement("UPDATE banned_players SET banned_by_player_id = ?, banned_time = ?, duration_ticks = ?, joinban = ? WHERE ID = ?");
                statement.setString(1, super.getBannedByCredentials().getUniqueId().toString());
                statement.setTimestamp(2, getBanStartTime());
                statement.setLong(3, getDurationTicks());
                statement.setBoolean(4, isJoinBan());
                statement.setInt(5, getId());
                statement.executeUpdate();
            } else {
                statement = DBManager.prepareStatementWithAutoGeneratedKeys("INSERT INTO banned_players (player_id, banned_by_player_id, banned_time, duration_ticks, joinban) VALUES (?, ?, ?, ?, ?)");
                statement.setString(1, bannedPlayerCredentials.getUniqueId().toString());
                statement.setString(2, super.getBannedByCredentials().getUniqueId().toString());
                statement.setTimestamp(3, getBanStartTime());
                statement.setLong(4, getDurationTicks());
                statement.setBoolean(5, isJoinBan());
                statement.execute();

                set = statement.getGeneratedKeys();

                if (set.next()) {
                    setId(set.getInt(1));
                }
            }
        } catch (SQLException ex) {
            InnPlugin.logError("Unable to save " + bannedPlayerCredentials.getName() + "'s ban!", ex);
        } finally {
            DBManager.closeResultSet(set);
            DBManager.closePreparedStatement(statement);
        }
    }

    /**
     * Deletes this ban object from the database
     */
    @Override
    public void delete() {
        PreparedStatement statement = null;

        try {
            statement = DBManager.prepareStatement("UPDATE banned_players SET expired = ? WHERE ID = ?");
            statement.setLong(1, System.currentTimeMillis());
            statement.setInt(2, getId());
            statement.execute();
        } catch (SQLException ex) {
            InnPlugin.logError("Unable to save " + bannedPlayerCredentials.getName() + "'s ban!", ex);
        } finally {
            DBManager.closePreparedStatement(statement);
        }
    }

}