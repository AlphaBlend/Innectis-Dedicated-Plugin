package net.innectis.innplugin.player.tools.miningstick;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.UUID;
import net.innectis.innplugin.InnPlugin;
import net.innectis.innplugin.handlers.datasource.DBManager;
import net.innectis.innplugin.player.PlayerCredentials;

/**
 * Data for the mining stick
 *
 * @author AlphaBlend
 */
public class MiningStickData {
    private int id;
    private PlayerCredentials credentials;
    private long settings;
    private int size;

    public MiningStickData(PlayerCredentials credentials, long settings, int size) {
        this(0, credentials, settings, size);
    }

    public MiningStickData(int id, PlayerCredentials credentials, long settings, int size) {
        this.id = id;
        this.credentials = credentials;
        this.settings = settings;
        this.size = size;
    }

    /**
     * Gets the credentials of the player of this
     * mining stick data
     * @return
     */
    public PlayerCredentials getCredentials() {
        return credentials;
    }

    /**
     * Checks if the mining stick has the following setting
     * @param setting
     * @return
     */
    public boolean hasSetting(MiningStickSettings setting) {
        return ((settings & setting.getFlagBit()) == setting.getFlagBit());
    }

    /**
     * Sets the new mining stick setting
     * @param setting
     * @param enable
     */
    public void setSetting(MiningStickSettings setting, boolean enable) {
        if (enable) {
            settings |= setting.getFlagBit();
        } else {
            settings &= ~setting.getFlagBit();
        }
    }

    /**
     * Gets the size of the mining stick
     * @return
     */
    public int getSize() {
        return size;
    }

    /**
     * Sets the size of the mining stick
     * @param size
     */
    public void setSize(int size) {
        this.size = size;
    }

    /**
     * Updates the settings of the mining stick
     */
    public void update() {
        PreparedStatement statement = null;
        ResultSet set = null;

        try {
            UUID playerId = credentials.getUniqueId();

            if (id > 0) {
                statement = DBManager.prepareStatement("UPDATE player_mining_stick SET settings = ?, size = ? WHERE player_id = ?;");
                statement.setLong(1, settings);
                statement.setInt(2, size);
                statement.setString(3, credentials.getUniqueId().toString());
                statement.executeUpdate();
            } else {
                statement = DBManager.prepareStatementWithAutoGeneratedKeys("INSERT INTO player_mining_stick (player_id, settings, size) VALUES (?, ?, ?);");
                statement.setString(1, playerId.toString());
                statement.setLong(2, settings);
                statement.setInt(3, size);
                statement.execute();

                set = statement.getGeneratedKeys();

                if (set.next()) {
                    id = set.getInt(1);
                }
            }
        } catch (SQLException ex) {
            InnPlugin.logError("Unable to " + (id > 0 ? "update" : "save") + " the mining stick settings for " + credentials.getName() + "!", ex);
        } finally {
            DBManager.closePreparedStatement(statement);
            DBManager.closeResultSet(set);
        }
    }
}
