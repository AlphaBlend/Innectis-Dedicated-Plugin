package net.innectis.innplugin.objects.owned;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import net.innectis.innplugin.handlers.datasource.DBManager;
import net.innectis.innplugin.InnPlugin;
import net.innectis.innplugin.player.PlayerCredentials;
import org.bukkit.Location;
import org.bukkit.World;
import org.bukkit.block.Block;

/**
 * A class that handles a single trapdoor
 *
 * @author AlphaBlend
 */
public class InnectisTrapdoor extends InnectisOwnedObject {

    private Block trapdoor;

    public InnectisTrapdoor(World world, Location loc, int id, PlayerCredentials ownerCredentials, List<PlayerCredentials> members, List<PlayerCredentials> operators, long flags) {
        super(world, loc.toVector(), loc.toVector(), id, ownerCredentials, members, operators, flags);
        trapdoor = loc.getBlock();
    }

    @Override
    public Class<? extends FlagType> getEnumClass() {
        return null;
    }

    private boolean createTrapdoorInDB() {
        PreparedStatement statement = null;
        ResultSet set = null;

        try {
            Location loc = trapdoor.getLocation();

            int x = loc.getBlockX();
            int y = loc.getBlockY();
            int z = loc.getBlockZ();

            statement = DBManager.prepareStatementWithAutoGeneratedKeys("INSERT INTO trapdoors (owner_id, world, locx, locy, locz, flags) VALUES (?, ?, ?, ?, ?, ?)");
            statement.setString(1, super.getOwnerCredentials().getUniqueId().toString());
            statement.setString(2, loc.getWorld().getName());
            statement.setInt(3, x);
            statement.setInt(4, y);
            statement.setInt(5, z);
            statement.setLong(6, super.getFlags());
            statement.execute();
            set = statement.getGeneratedKeys();

            if (set.next()) {
                super.setId(set.getInt(1));
                super.setUpdated(false);
            } else {
                InnPlugin.logError("New trapdoor not found in the database!");
                return false;
            }
        } catch (SQLException ex) {
            InnPlugin.logError("Unable to save trapdoor!", ex);
            return false;
        } finally {
            DBManager.closeResultSet(set);
            DBManager.closePreparedStatement(statement);
        }

        return true;
    }

    /**
     * Gets the location of this trap door
     * @return
     */
    public Location getLocation() {
        return trapdoor.getLocation();
    }

    // TODO: Add check for lot access

    @Override
    public boolean save() {
        if (super.getId() == 0) {
            return createTrapdoorInDB();
        }

        Location loc = trapdoor.getLocation();

        int x = loc.getBlockX();
        int y = loc.getBlockY();
        int z = loc.getBlockZ();

        PreparedStatement statement = null;

        try {
            statement = DBManager.prepareStatement("UPDATE trapdoors SET owner_id = ?, world = ?, locx = ?, locy = ?, locz = ?, flags = ? WHERE trapdoorid = ?");
            statement.setString(1, super.getOwnerCredentials().getUniqueId().toString());
            statement.setString(2, loc.getWorld().getName());
            statement.setInt(3, x);
            statement.setInt(4, y);
            statement.setInt(5, z);
            statement.setLong(6, super.getFlags());
            statement.setInt(7, super.getId());
            statement.executeUpdate();
            DBManager.closePreparedStatement(statement);

            statement = DBManager.prepareStatement("DELETE FROM trapdoors_members WHERE trapdoorid = ?");
            statement.setInt(1, super.getId());
            statement.execute();
            DBManager.closePreparedStatement(statement);

            for (PlayerCredentials pc : getMembers()) {
                statement = DBManager.prepareStatement("INSERT INTO trapdoors_members (trapdoorid, player_id, isop) VALUES (?, ?, 0)");
                statement.setInt(1, super.getId());
                statement.setString(2, pc.getUniqueId().toString());
                statement.execute();
                DBManager.closePreparedStatement(statement);
            }

            for (PlayerCredentials pc : getOperators()) {
                statement = DBManager.prepareStatement("INSERT INTO trapdoors_members (trapdoorid, player_id, isop) VALUES (?, ?, 1)");
                statement.setInt(1, super.getId());
                statement.setString(2, pc.getUniqueId().toString());
                statement.execute();
                DBManager.closePreparedStatement(statement);
            }

            super.setUpdated(false);
        } catch (SQLException ex) {
            InnPlugin.logError("Unable to save trapdoor!", ex);
            return false;
        } finally {
            DBManager.closePreparedStatement(statement);
        }

        return true;
    }

    @Override
    public boolean isAtLocation(Location location) {
        return trapdoor.getLocation().equals(location);
    }

    @Override
    public OwnedObjectType getType() {
        return OwnedObjectType.TRAPDOOR;
    }
    
}
