package net.innectis.innplugin.objects.owned;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import net.innectis.innplugin.handlers.datasource.DBManager;
import net.innectis.innplugin.InnPlugin;
import net.innectis.innplugin.items.IdpMaterial;
import net.innectis.innplugin.objects.owned.handlers.LotHandler;
import net.innectis.innplugin.player.PlayerCredentials;
import org.bukkit.Location;
import org.bukkit.World;
import org.bukkit.block.Block;

/**
 *
 * @author Lynxy
 */
public class InnectisDoor extends InnectisOwnedObject {

    private Block door1;
    private Block door2;

    public InnectisDoor(World world, Block door1, Block door2, int id, PlayerCredentials ownerCredentials, List<PlayerCredentials> members, List<PlayerCredentials> operators, long flags) {
        super(world, door1.getLocation().toVector(), (door2 == null ? door1.getLocation().toVector() : door2.getLocation().toVector()), id, ownerCredentials, members, operators, flags);
        this.door1 = door1;
        this.door2 = door2;
    }

    @Override
    protected Class<? extends FlagType> getEnumClass() {
        return null;
    }

    public Block getDoor1() {
        return this.door1;
    }

    public void setDoor1(Block door) {
        this.door1 = door;
    }

    public Block getDoor2() {
        return this.door2;
    }

    public void setDoor2(Block door) {
        this.door2 = door;
    }

    /**
     * Returns true if location is within the area of this object
     * @param location
     */
    @Override
    public boolean isAtLocation(Location location) {
        if (door1 != null) {
            Location door1Loc = door1.getLocation();

            if (door1.getWorld().equals(location.getWorld())
                && door1Loc.getBlockX() == location.getBlockX()
                && (door1Loc.getBlockY() == location.getBlockY() || door1Loc.getBlockY() + 1 == location.getBlockY()) //doors are two high
                && door1Loc.getBlockZ() == location.getBlockZ()) {
                return true;
            }
        }

        if (door2 != null) {
            Location door2Loc = door2.getLocation();

            if (door2.getWorld().equals(location.getWorld())
                && door2Loc.getBlockX() == location.getBlockX()
                && (door2Loc.getBlockY() == location.getBlockY() || door2Loc.getBlockY() + 1 == location.getBlockY()) //doors are two high
                && door2Loc.getBlockZ() == location.getBlockZ()) {
                return true;
            }
        }

        return false;
    }

    /**
     * Returns whether or not the blocks specified for this InnectisDoor are actually Iron Doors
     */
    public boolean isValid() {
        if (door1 != null && IdpMaterial.fromBlock(door1) != IdpMaterial.IRON_DOOR_BLOCK) {
            return false;
        }

        if (door2 != null && IdpMaterial.fromBlock(door2) != IdpMaterial.IRON_DOOR_BLOCK) {
            door2 = null; //this object is still valid since door1 exists
        }

        return !(door1 == null);
    }

    public boolean isDoubleDoor() {
        return (door2 != null);
    }

    /**
     * Returns true if the player is the owner or a member, or if this Door's owner is % or contains member %, or if this Door has member
     * @ and player is a member of the Lot this door is on
     * @param player
     */
    @Override
    public boolean canPlayerAccess(String playerName) {
        if (super.canPlayerAccess(playerName)) {
            return true;
        }

        if (containsMember("@")) { //allow lot members
            InnectisLot lot = LotHandler.getLot(door1.getLocation());
            if (lot != null && (lot.containsMember(playerName) || lot.containsOperator(playerName))) {
                return true;
            }
        }
        return false;
    }

    private boolean createDoorInDB() {
        PreparedStatement statement = null;
        ResultSet result = null;

        try {
            statement = DBManager.prepareStatementWithAutoGeneratedKeys("REPLACE INTO doors "
                    + "(owner_id, world, locx1, locy1, locz1, locx2, locy2, locz2, flags)"
                    + "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)");
            statement.setString(1, super.getOwnerCredentials().getUniqueId().toString());
            statement.setString(2, super.getWorld().getName());
            statement.setInt(3, getDoor1().getX());
            statement.setInt(4, getDoor1().getY());
            statement.setInt(5, getDoor1().getZ());
            statement.setInt(6, getDoor2() == null ? 0 : getDoor2().getX());
            statement.setInt(7, getDoor2() == null ? 0 : getDoor2().getY());
            statement.setInt(8, getDoor2() == null ? 0 : getDoor2().getZ());
            statement.setLong(9, super.getFlags());
            statement.executeUpdate();
            result = statement.getGeneratedKeys();

            if (result.next()) {
                super.setId(result.getInt(1));
                super.setUpdated(false);
            } else {
                InnPlugin.logError("New door not found in the database!");
                return false;
            }
        } catch (SQLException ex) {
            InnPlugin.logError("Unable to create new door in database!", ex);
            return false;
        } finally {
            DBManager.closeResultSet(result);
            DBManager.closePreparedStatement(statement);
        }

        return true;
    }

    @Override
    public boolean save() {
        PreparedStatement statement = null;

        try {
            if (getId() == -1) {
                return createDoorInDB();
            }

            statement = DBManager.prepareStatement("UPDATE doors SET "
                    + "owner_id = ?, world = ?, locx1 = ?, "
                    + "locy1 = ?, locz1 = ?, locx2 = ?, "
                    + "locy2 = ?, locz2 = ?, flags = ? "
                    + "WHERE doorid = ?;");
            statement.setString(1, super.getOwnerCredentials().getUniqueId().toString());
            statement.setString(2, super.getWorld().getName());
            statement.setInt(3, getDoor1().getX());
            statement.setInt(4, getDoor1().getY());
            statement.setInt(5, getDoor1().getZ());
            statement.setInt(6, getDoor2() == null ? 0 : getDoor2().getX());
            statement.setInt(7, getDoor2() == null ? 0 : getDoor2().getY());
            statement.setInt(8, getDoor2() == null ? 0 : getDoor2().getZ());
            statement.setLong(9, super.getFlags());
            statement.setInt(10, super.getId());
            statement.executeUpdate();
            DBManager.closePreparedStatement(statement);

            statement = DBManager.prepareStatement("DELETE FROM doors_members WHERE doorid = ?;");
            statement.setInt(1, super.getId());
            statement.executeUpdate();
            DBManager.closePreparedStatement(statement);

            for (PlayerCredentials pc : getMembers()) {
                statement = DBManager.prepareStatement("INSERT INTO doors_members (doorid, player_id, isop) VALUES (?, ?, 0);");
                statement.setInt(1, super.getId());
                statement.setString(2, pc.getUniqueId().toString());
                statement.executeUpdate();
                DBManager.closePreparedStatement(statement);
            }
            for (PlayerCredentials pc : getOperators()) {
                statement = DBManager.prepareStatement("INSERT INTO doors_members (doorid, player_id, isop) VALUES (?, ?, 1);");
                statement.setInt(1, super.getId());
                statement.setString(2, pc.getUniqueId().toString());
                statement.executeUpdate();
                DBManager.closePreparedStatement(statement);
            }

            super.setUpdated(false);
        } catch (SQLException ex) {
            InnPlugin.logError("Unable to save door #" + super.getId() + "!", ex);
            return false;
        } finally {
            DBManager.closePreparedStatement(statement);
        }

        return true;
    }

    @Override
    public OwnedObjectType getType() {
        return OwnedObjectType.DOOR;
    }
    
}
