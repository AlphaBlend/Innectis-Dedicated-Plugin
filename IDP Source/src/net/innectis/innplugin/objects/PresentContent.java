package net.innectis.innplugin.objects;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.UUID;
import net.innectis.innplugin.handlers.datasource.DBManager;
import net.innectis.innplugin.InnPlugin;
import net.innectis.innplugin.specialitem.SpecialItemType;
import net.innectis.innplugin.items.IdpItemStack;
import net.innectis.innplugin.items.IdpMaterial;
import net.innectis.innplugin.items.ItemData;
import net.innectis.innplugin.items.StackBag;
import net.innectis.innplugin.player.PlayerCredentials;
import net.innectis.innplugin.player.PlayerCredentialsManager;
import net.innectis.innplugin.util.StringUtil;

/**
 *
 * @author Hret
 *
 * This class has the items that belong to a present
 */
public class PresentContent {

    /** The tagname for itemdata which contains the tag for presents * */
    public static final String PRESENT_TAG = "presentid";
    /** The material where presents are set to. * */
    public static final IdpMaterial PRESENT_MATERIAL = IdpMaterial.REDSTONE_LAMP_OFF;
    //
    private int presentid;
    /** The credentials of the player who created the present */
    private PlayerCredentials creatorCredentials;
    private String title;
    private long bagid;
    private boolean opened;
    /** The items */
    private IdpItemStack[] items;

    private PresentContent() {
    }

    /**
     * Makes a new present without items
     * @param creatorCredentials
     * @param title
     */
    public PresentContent(PlayerCredentials creatorCredentials, String title) {
        this(-1, creatorCredentials, title, false, -1, null);
    }

    private PresentContent(int presentid, PlayerCredentials creatorCredentials, String title, boolean opened, long bagid, IdpItemStack[] items) {
        this.presentid = presentid;
        this.creatorCredentials = creatorCredentials;
        this.title = title;
        this.opened = opened;
        this.bagid = bagid;
        this.items = items;
    }

    /**
     * The ID of the present.
     * @return
     */
    public int getPresentid() {
        return presentid;
    }

    /**
     * Gets the credentials of the creator of this present
     * @return
     */
    public PlayerCredentials getCreatorCredentials() {
        return creatorCredentials;
    }

    /**
     * The name of the player who made the present.
     * @return
     */
    public String getCreator() {
        return creatorCredentials.getName();
    }

    /**
     * The title of this present.
     * @return
     */
    public String getTitle() {
        return title;
    }

    /**
     * Sets the title (or tag) of this item.
     * @param title
     */
    public void setTitle(String title) {
        this.title = title;
    }

    /**
     * The ID of the contentbag with the items
     * @return
     */
    public long getBagid() {
        return bagid;
    }

    /**
     * Checks if the item has been opened
     * @return
     */
    public boolean isOpened() {
        return opened;
    }

    /**
     * Set if the present was opened.
     * @param opened
     */
    public void setOpened(boolean opened) {
        this.opened = opened;
    }

    /**
     * The items in the present
     * @return
     */
    public IdpItemStack[] getItems() {
        return items;
    }

    /**
     * Set the items in the present
     * @param items
     */
    public void setItems(IdpItemStack[] items) {
        this.items = items;
    }

    /**
     * Saves or updates the enderchest contents.
     *
     * When its inserted (chestid = 0) the chestid will be filled with the generated value.
     * @return true if succeed.
     */
    public boolean save() {
        // Dont allow empty presents to be stored...
        if (items == null) {
            return false;
        }

        PreparedStatement statement = null;
        ResultSet set = null;

        try {
            // If id <= 0 then its new -> INSERT
            if (presentid <= 0) {
                StackBag bag = new StackBag(items);
                bag.save();
                this.bagid = bag.getBagid();

                statement = DBManager.prepareStatementWithAutoGeneratedKeys(" INSERT INTO presents (creator_id, title, bagid) VALUES (?,?,?) ");
                statement.setString(1, creatorCredentials.getUniqueId().toString());
                statement.setString(2, title);
                statement.setLong(3, bag.getBagid());
                statement.executeUpdate();

                // Update the chestid
                set = statement.getGeneratedKeys();

                if (set.next()) {
                    presentid = set.getInt(1);
                    return true;
                }
            } // Its not new -> Update!
            else {
                StackBag bag = new StackBag(bagid, items);
                bag.save();

                statement = DBManager.prepareStatement(" UPDATE presents SET bagid = ?, title = ?, opened = ? where presentid = ? ");
                statement.setLong(1, bag.getBagid());
                statement.setString(2, title);
                statement.setBoolean(3, opened);
                statement.setInt(4, presentid);

                // Check if the something was updated
                return statement.executeUpdate() == 1;
            }
        } catch (SQLException ex) {
            InnPlugin.logError("Error saving present!", ex);
        } finally {
            DBManager.closeResultSet(set);
            DBManager.closePreparedStatement(statement);
        }

        return false;
    }

    /**
     * This will lookup the contents for the given present.
     * <p/>
     * If the present was not found, null will be returned.
     *
     * @param presentid
     * @return
     */
    public static PresentContent getPresent(int presentid) {
        if (presentid <= 0) {
            return null;
        }

        PreparedStatement statement = null;
        ResultSet set = null;

        try {
            statement = DBManager.prepareStatement(" SELECT creator_id, title, bagid, opened FROM presents WHERE presentid = ? ");
            statement.setInt(1, presentid);
            set = statement.executeQuery();

            long bagid = 0;
            String creatorIdString = "";
            UUID creatorId = null;
            PlayerCredentials creatorCredentials = null;
            String title = "";
            boolean opened = false;

            if (set.next()) {
                bagid = set.getLong("bagid");

                creatorIdString = set.getString("creator_id");
                creatorId = UUID.fromString(creatorIdString);
                creatorCredentials = PlayerCredentialsManager.getByUniqueId(creatorId);

                title = set.getString("title");
                opened = set.getBoolean("opened");
            }

            if (bagid > 0) {
                StackBag bag = StackBag.getContentbag(bagid);

                return new PresentContent(presentid, creatorCredentials, title, opened, bagid, bag.getContents());
            }
        } catch (SQLException ex) {
            InnPlugin.logError("Error loading present!", ex);
        } finally {
            DBManager.closeResultSet(set);
            DBManager.closePreparedStatement(statement);
        }

        return null;
    }

    /**
     * Looks up the presentcontent of this item.
     * @param item
     * @return The presentcontent or null if none.
     */
    public static PresentContent getPresent(IdpItemStack item) {
        if (item == null) {
            return null;
        }

        if (item.getItemdata().getSpecialItem() == SpecialItemType.PRESENT) {
            String presentid = item.getItemdata().getValue(PresentContent.PRESENT_TAG);

            if (StringUtil.stringIsNullOrEmpty(presentid)) {
                return null;
            }

            try {
                int id = Integer.parseInt(presentid);
                return PresentContent.getPresent(id);
            } catch (NumberFormatException nfe) {
                return null;
            }
        }

        return null;
    }

    /**
     * Creats a new default presentitem.
     */
    public IdpItemStack createPresent() {
        IdpItemStack presentitem = new IdpItemStack(PresentContent.PRESENT_MATERIAL, 1);
        setPresent(presentitem);
        return presentitem;
    }

    /**
     * Sets the present to the given item
     * @param item
     * @param present
     */
    public void setPresent(IdpItemStack item) {
        ItemData data = item.getItemdata();

        data.addLore("Right-click to open!");
        data.setSpecialItem(SpecialItemType.PRESENT);
        data.setItemName(getTitle());
        data.setValue(PresentContent.PRESENT_TAG, String.valueOf(getPresentid()));
    }

    /**
     * This will copy the contents of the present and clears the reference to the database.
     * <p/>
     * Note: the new present is not saved in the database!
     * @return
     */
    @Override
    public PresentContent clone() {
        PresentContent cont = this;
        this.bagid = 0;
        this.presentid = 0;
        return cont;
    }

}
