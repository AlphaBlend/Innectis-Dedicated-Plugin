package net.innectis.innplugin.objects;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.UUID;
import net.innectis.innplugin.handlers.datasource.DBManager;
import net.innectis.innplugin.InnPlugin;
import org.bukkit.Location;

/**
 * Class to hold a single home location
 *
 * @author AlphaBlend
 */
public class IdpHome {

    private int databaseId;
    private UUID playerId;
    private int homeId;
    private String name;
    private Location location;

    /**
     * Constructs a home object with a brand new home ID
     * @param playerId
     * @param homeId
     * @param name
     * @param location
     */
    public IdpHome(UUID playerId, int homeId, String name, Location location) {
        this(0, playerId, homeId, name, location);
    }

    /**
     * Constructs a new object to hold a player's home location
     *
     * @param databaseId
     * @param playerId
     * @param homeId
     * @param name
     * @param location
     */
    public IdpHome(int databaseId, UUID playerId, int homeId, String name, Location location) {
        this.databaseId = databaseId;
        this.playerId = playerId;
        this.homeId = homeId;
        this.name = name;
        this.location = location;
    }

    /**
     * Gets the ID of this home
     *
     * @return
     */
    public int getId() {
        return homeId;
    }

    /**
     * Sets the home ID of this home
     * @param homeId
     */
    public void setId(int homeId) {
        this.homeId = homeId;
    }

    /**
     * Gets the name of this home
     *
     * @return
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the name of this home
     * @param name
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Sets the location of this home
     * @param location
     */
    public void setLocation(Location location) {
        this.location = location;
    }

    /**
     * Gets the location of this home
     *
     * @return
     */
    public Location getLocation() {
        return location;
    }

    /**
     * Returns if the specified location is the same for this home
     *
     * @param obj
     * @return
     */
    public boolean equals(Location loc) {
        if (loc.getBlockX() == location.getBlockX()
                && loc.getBlockY() == location.getBlockY()
                && loc.getBlockZ() == location.getBlockZ()
                && loc.getWorld().equals(location.getWorld())) {
            return true;
        }

        return false;
    }

    /**
     * Saves this home to the database
     */
    public void save() {
        PreparedStatement statement = null;;
        ResultSet set = null;

        try {
            if (databaseId > 0) {
                statement = DBManager.prepareStatement("UPDATE homes SET homeid = ?, homename = ?, world = ?, locx = ?, locy = ?, locz = ?, yaw = ? WHERE ID = ?");
                statement.setInt(1, homeId);
                statement.setString(2, name);
                statement.setString(3, location.getWorld().getName());
                statement.setInt(4, location.getBlockX());
                statement.setInt(5, location.getBlockY());
                statement.setInt(6, location.getBlockZ());
                statement.setInt(7, Math.round(location.getYaw()));
                statement.setInt(8, databaseId);
                statement.executeUpdate();
            } else {
                statement = DBManager.prepareStatementWithAutoGeneratedKeys("INSERT INTO homes (player_id, homeid, homename, world, locx, locy, locz, yaw) VALUES (?, ?, ?, ?, ?, ?, ?, ?)");
                statement.setString(1, playerId.toString());
                statement.setInt(2, homeId);
                statement.setString(3, name);
                statement.setString(4, location.getWorld().getName());
                statement.setInt(5, location.getBlockX());
                statement.setInt(6, location.getBlockY());
                statement.setInt(7, location.getBlockZ());
                statement.setInt(8, Math.round(location.getYaw()));
                statement.execute();

                set = statement.getGeneratedKeys();

                if (set.next()) {
                    databaseId = set.getInt(1);
                }
            }
        } catch (SQLException ex) {
            InnPlugin.logError("Unable to save " + (databaseId == 0 ? "new " : "") + "home!", ex);
        } finally {
            DBManager.closeResultSet(set);
            DBManager.closePreparedStatement(statement);
        }
    }

    /**
     * Deletes this home from the database
     */
    public void delete() {
        PreparedStatement statement = null;

        try {
            statement = DBManager.prepareStatement("DELETE FROM homes WHERE ID = ?");
            statement.setInt(1, databaseId);
            statement.execute();
        } catch (SQLException ex) {
            InnPlugin.logError("Unable to delete home!", ex);
        } finally {
            DBManager.closePreparedStatement(statement);
        }
    }

}
